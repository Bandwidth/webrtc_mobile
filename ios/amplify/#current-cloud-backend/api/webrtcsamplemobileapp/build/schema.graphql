
type Person @aws_iam @aws_api_key {
  id: ID!
  firstName: String!
  lastName: String!
  clientId: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type DeviceInfo @aws_iam @aws_api_key {
  id: ID!
  notifyType: String!
  deviceToken: String!
  sessionId: String
  participantId: String
  participantToken: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPersonConnection @aws_api_key @aws_iam {
  items: [Person]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPersonFilterInput {
  id: ModelIDInput
  firstName: ModelStringInput
  lastName: ModelStringInput
  clientId: ModelStringInput
  and: [ModelPersonFilterInput]
  or: [ModelPersonFilterInput]
  not: ModelPersonFilterInput
}

type Query {
  getPerson(id: ID!): Person @aws_api_key @aws_iam
  listPeople(filter: ModelPersonFilterInput, limit: Int, nextToken: String): ModelPersonConnection @aws_api_key @aws_iam
  syncPeople(filter: ModelPersonFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPersonConnection @aws_api_key @aws_iam
  getDeviceInfo(id: ID!): DeviceInfo @aws_api_key @aws_iam
  listDeviceInfos(filter: ModelDeviceInfoFilterInput, limit: Int, nextToken: String): ModelDeviceInfoConnection @aws_api_key @aws_iam
  syncDeviceInfos(filter: ModelDeviceInfoFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelDeviceInfoConnection @aws_api_key @aws_iam
}

input ModelPersonConditionInput {
  firstName: ModelStringInput
  lastName: ModelStringInput
  clientId: ModelStringInput
  and: [ModelPersonConditionInput]
  or: [ModelPersonConditionInput]
  not: ModelPersonConditionInput
}

input CreatePersonInput {
  id: ID
  firstName: String!
  lastName: String!
  clientId: String!
  _version: Int
}

input UpdatePersonInput {
  id: ID!
  firstName: String
  lastName: String
  clientId: String
  _version: Int
}

input DeletePersonInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPerson(input: CreatePersonInput!, condition: ModelPersonConditionInput): Person @aws_api_key @aws_iam
  updatePerson(input: UpdatePersonInput!, condition: ModelPersonConditionInput): Person @aws_api_key @aws_iam
  deletePerson(input: DeletePersonInput!, condition: ModelPersonConditionInput): Person @aws_api_key @aws_iam
  createDeviceInfo(input: CreateDeviceInfoInput!, condition: ModelDeviceInfoConditionInput): DeviceInfo @aws_api_key @aws_iam
  updateDeviceInfo(input: UpdateDeviceInfoInput!, condition: ModelDeviceInfoConditionInput): DeviceInfo @aws_api_key @aws_iam
  deleteDeviceInfo(input: DeleteDeviceInfoInput!, condition: ModelDeviceInfoConditionInput): DeviceInfo @aws_api_key @aws_iam
}

type Subscription {
  onCreatePerson: Person @aws_subscribe(mutations: ["createPerson"]) @aws_api_key @aws_iam
  onUpdatePerson: Person @aws_subscribe(mutations: ["updatePerson"]) @aws_api_key @aws_iam
  onDeletePerson: Person @aws_subscribe(mutations: ["deletePerson"]) @aws_api_key @aws_iam
  onCreateDeviceInfo: DeviceInfo @aws_subscribe(mutations: ["createDeviceInfo"]) @aws_api_key @aws_iam
  onUpdateDeviceInfo: DeviceInfo @aws_subscribe(mutations: ["updateDeviceInfo"]) @aws_api_key @aws_iam
  onDeleteDeviceInfo: DeviceInfo @aws_subscribe(mutations: ["deleteDeviceInfo"]) @aws_api_key @aws_iam
}

type ModelDeviceInfoConnection @aws_api_key @aws_iam {
  items: [DeviceInfo]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDeviceInfoFilterInput {
  id: ModelIDInput
  notifyType: ModelStringInput
  deviceToken: ModelStringInput
  sessionId: ModelStringInput
  participantId: ModelStringInput
  participantToken: ModelStringInput
  and: [ModelDeviceInfoFilterInput]
  or: [ModelDeviceInfoFilterInput]
  not: ModelDeviceInfoFilterInput
}

input ModelDeviceInfoConditionInput {
  notifyType: ModelStringInput
  deviceToken: ModelStringInput
  sessionId: ModelStringInput
  participantId: ModelStringInput
  participantToken: ModelStringInput
  and: [ModelDeviceInfoConditionInput]
  or: [ModelDeviceInfoConditionInput]
  not: ModelDeviceInfoConditionInput
}

input CreateDeviceInfoInput {
  id: ID
  notifyType: String!
  deviceToken: String!
  sessionId: String
  participantId: String
  participantToken: String
  _version: Int
}

input UpdateDeviceInfoInput {
  id: ID!
  notifyType: String
  deviceToken: String
  sessionId: String
  participantId: String
  participantToken: String
  _version: Int
}

input DeleteDeviceInfoInput {
  id: ID!
  _version: Int
}

